Andrew Lai and Jen Vazquez 

Part 0: 

4.
output = 0Yo!1Yo!Yo!2Yo!Yo!Yo!3Yo!Yo!Yo!Yo!4Yo!Yo!Yo!Yo!Yo!5Yo!Yo!Yo!Yo!Yo!5
in the guard statement of the while loop, fork is called
When the stdout is not fflushed, it concatenates all the Yo!'s as shown above. 
When it is fflushed, we get 0Yo!1Yo!2Yo!3Yo!4Yo!55 which is what we expected. 


Not fflushed with the gdb debugger:
[Detaching after fork from child process 57728]
0[Detaching after fork from child process 57729]
Yo!1[Detaching after fork from child process 57730]
Yo!Yo!2[Detaching after fork from child process 57731]
Yo!Yo!Yo!3[Detaching after fork from child process 57732]
Yo!Yo!Yo!Yo!4[Detaching after fork from child process 57733]
Yo!Yo!Yo!Yo!Yo!5Yo!Yo!Yo!Yo!Yo!5[Inferior 1 (process 57724) exited normally]


Part 1:

coolboots@Crux:~/Documents/CPE 453 Operating Systems/program0_warmup$ ./a.out > out.txt
coolboots@Crux:~/Documents/CPE 453 Operating Systems/program0_warmup$ cat out.txt | sort | uniq -c

>> 1000 parentchild

Parent ran first every time

1.     
    415 childarent
    585 childparent
    257309 parent
    1 pparent
2. 

>> 1000 parentchild

3.

>> 1000 parentchild

2 and 3 ran the same way while the the first version with just printf had 
a different output. For number 1, we think it ran like that because of a combination of 
the printf and not fflushing the output. This is how it ran on our system, it quite possibly 
run differently on different machines. 


4.

Example:
>>    4 childparent
    996 parentchild

When we run for .1 second, it printed out differently every time.
When we run for 1 second, and it seems like it ran the same. The radio between 
the two output lines were similar. The parent ran first the majority of the time in 
each case.  

Part 2:

./a.out & pmap !$

>> 00055d96871b000      4K r---- a.out
000055d96871c000      4K r-x-- a.out
000055d96871d000      4K r---- a.out
000055d96871e000      4K r---- a.out
000055d96871f000      4K rw--- a.out
000055d968d67000    132K rw---   [ anon ]
00007fba02bf6000    136K r---- libc-2.31.so
00007fba02c18000   1504K r-x-- libc-2.31.so
00007fba02d90000    312K r---- libc-2.31.so
00007fba02dde000     16K r---- libc-2.31.so
00007fba02de2000      8K rw--- libc-2.31.so
00007fba02de4000     24K rw---   [ anon ]
00007fba02e06000      4K r---- ld-2.31.so
00007fba02e07000    140K r-x-- ld-2.31.so
00007fba02e2a000     32K r---- ld-2.31.so
00007fba02e33000      4K r---- ld-2.31.so
00007fba02e34000      4K rw--- ld-2.31.so
00007fba02e35000      4K rw---   [ anon ]
00007ffd9cc69000    132K rw---   [ stack ]
00007ffd9cd2e000     16K r----   [ anon ]
00007ffd9cd32000      8K r-x--   [ anon ]
ffffffffff600000      4K --x--   [ anon ]
 total             2500K

The leftmost hexadecimal number is probably the address, the next number is probably block size,
the next bit is probably permissions for the section, not sure what the last bit is but it looks like some
kind of label. Maybe the caller?
